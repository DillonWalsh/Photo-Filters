# -*- coding: utf-8 -*-
"""Copy of Python - Starting/Working Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15pyS40aZttqZTjoLu_GJl9CY4DTTtrPS

This was used for AIIE2024
"""

from PIL import Image

my_image = Image.open("cat.jpeg")
my_image.thumbnail((250,250))

my_image

# Print the height and width of the image
height = my_image.height
print("Height of the image: ", height)
width = my_image.width
print ("Width ofmy image: ", height)

# Get the RGB of pixel
pixel = my_image.getpixel((120, 60))
print (pixel)

# This adds a single discolored pixel at position (120,60) with RGB value (120,120,120)
my_image.putpixel((120,60), (120,120,120))

my_image

# Put all pixels for x and y even in black
# RGB = 0,0,0
for i in range(my_image.width):
  for j in range(my_image.height):
    if (i % 2 == 0 and j % 2 == 0):
      my_image.putpixel((i,j), (0,0,0))
my_image

# Pixel average
# Takes the average RGB value of a pixel
def pixel_average(p):
  average = (p[0]+p[1]+p[2])/3
  average = int(average)
  return average

# Replace bright pixels by grey pixels
for i in range(my_image.width):
  for j in range(my_image.height):
    pixel = my_image.getpixel((i,j))
    pixelave = pixel_average(pixel)
    if pixelave > 153:
      my_image.putpixel((i,j), (pixelave,pixelave,pixelave))

my_image



# Creates a black border with a specified width
border_size = 25
for i in range(my_image.width):
  for j in range(my_image.height):
    if ((i - border_size <= 0) or (my_image.width - i <= border_size)):
      my_image.putpixel((i,j),(0,0,0))
    if ((j - border_size <= 0) or (my_image.height - j <= border_size)):
      my_image.putpixel((i,j),(0,0,0))
my_image